"use strict";(self.webpackChunkncor_network=self.webpackChunkncor_network||[]).push([[138],{1117:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"ontology-101","title":"Ontology 101","description":":Ontology illustration","source":"@site/wiki/ontology-101.md","sourceDirName":".","slug":"/ontology-101","permalink":"/wiki/ontology-101","draft":false,"unlisted":false,"editUrl":"https://github.com/NCOR-Organization/ncor.us/tree/main/wiki/ontology-101.md","tags":[],"version":"current","frontMatter":{"id":"ontology-101","title":"Ontology 101"},"sidebar":"wikiSidebar","previous":{"title":"NCOR Wiki Home","permalink":"/wiki/"},"next":{"title":"Barry Smith\'s Courses","permalink":"/wiki/courses/barry-smith"}}');var s=t(4848),o=t(8453);const r={id:"ontology-101",title:"Ontology 101"},a=void 0,l={},c=[];function d(e){const n={a:"a",div:"div",p:"p",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[":Ontology"," illustration\n",":BFO","+"]}),"\n",(0,s.jsx)(n.div,{}),"\n",(0,s.jsx)(n.p,{children:"::process profile\n::process characteristic"}),"\n",(0,s.jsx)(n.div,{}),"\n",(0,s.jsx)(n.div,{}),"\n",(0,s.jsx)(n.p,{children:"::GDC role / GDC function\n::\n::\nstasis"}),"\n",(0,s.jsx)(n.p,{children:"process profile"}),"\n",(0,s.jsx)(n.p,{children:"process characteristic (defined class) the counterpart of \u2018quality\u2019 for processes"}),"\n",(0,s.jsx)(n.p,{children:"Capability: disposition whose realizations are associated with the satisfaction of some interest on the part of some organism or group of organisms."}),"\n",(0,s.jsxs)(n.p,{children:["System\n",":Core"," definition: object aggregate whose members interact\n",":Call"," the members of an object aggregate elements of the system\n::Where object a interacts with object b =def there is some process in which both a and b participate\n::Extended definition: systems can themselves be elements of higher-order systems\n",":GDC"," role / GDC function\n::\n",":realism","\n",":Top-Level"," Ontology and hub-spokes approach\n",":universal"," / instance\n",":singular"," nouns\n",":mass"," nouns\n",":material"," entities ",(0,s.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Matter",children:"https://en.wikipedia.org/wiki/Matter"}),"\n",":specific"," dependence\n",":generic"," dependence GDC, ICE\n",":copyable"," patterns, concretizations\n",":dispositions"," and qualities\n",":capabilities"," and functions\n",":qualities"," have layers, e.g. colored vs. red\n",":roles","\n",":the"," all-some rule\n",":single"," inheritance\n",":the"," Aristotle definition of substance rule\n",":the"," universal quantification rule (why you can't say 'Tylenol pill' is a 'pill which cures headache')\n",":the"," no-multiple-inheritance rule (asserted vs. inferred)"]}),"\n",(0,s.jsxs)(n.p,{children:["Ontology Pitfall Scanner: ",(0,s.jsx)(n.a,{href:"https://oops.linkeddata.es/catalogue.jsp",children:"https://oops.linkeddata.es/catalogue.jsp"})]}),"\n",(0,s.jsx)(n.p,{children:"Definitions and axioms in first-order logic must be kept separate from each other: the definition of a term x is designed to be the shortest and logically simplest specification of necessary and sufficient conditions for being and instance of x. The axioms specify additional distinguishing marks which are seen as holding for all such instances. The advantages of this strategy are: 1. definitions are easy to understand and easy to apply, 2. definitions are more stable in the sense that new kinds of x might be discovered, or might evolve, which falsify one or other axiom, but still satisfy the definition."})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(6540);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);